package com.myproject.library.controller.rest;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.myproject.library.dto.AuthorCreateDto;
import com.myproject.library.dto.AuthorDto;
import com.myproject.library.dto.AuthorUpdateDto;
import com.myproject.library.service.AuthorService;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(AuthorRestController.class)
@AutoConfigureMockMvc(addFilters = false)
public class AuthorRestControllerIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private AuthorService authorService;

    @Test
    void testGetAuthorById() throws Exception {
        Long authorId = 1L;
        AuthorDto authorDto = new AuthorDto();
        authorDto.setId(authorId);
        authorDto.setName("Leo");
        authorDto.setSurname("Tolstoy");

        when(authorService.getAuthorById(authorId)).thenReturn(authorDto);

        mockMvc.perform(get("/author/{id}", authorId)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(authorId))
                .andExpect(jsonPath("$.name").value("Leo"))
                .andExpect(jsonPath("$.surname").value("Tolstoy"));
    }
    @Test
    void testGetAuthorByNameUsingCriteria() throws Exception {
        String authorName = "Leo Tolstoy";
        AuthorDto authorDto = new AuthorDto();
        authorDto.setId(1L);
        authorDto.setName(authorName);
        when(authorService.getAuthorByNameV1(authorName)).thenReturn(authorDto);

        mockMvc.perform(get("/author/byNameV1")
                        .param("name", authorName)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value(authorName));
    }

    @Test
    void testGetAuthorByNameUsingQuery() throws Exception {
        String authorName = "Leo Tolstoy";
        AuthorDto authorDto = new AuthorDto();
        authorDto.setId(1L);
        authorDto.setName(authorName);
        when(authorService.getAuthorByNameV2(authorName)).thenReturn(authorDto);
        mockMvc.perform(get("/author/byNameV2")
                        .param("name", authorName)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value(authorName));
    }

    @Test
    void testGetAuthorByNameUsingAutoGeneratedQuery() throws Exception {
        String authorName = "Leo Tolstoy";
        AuthorDto authorDto = new AuthorDto();
        authorDto.setId(1L);
        authorDto.setName(authorName);
        when(authorService.getAuthorByNameV3(authorName)).thenReturn(authorDto);
        mockMvc.perform(get("/author/byNameV3")
                        .param("name", authorName)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value(authorName));
    }
    @Test
    void testCreateAuthor() throws Exception {
        AuthorCreateDto authorCreateDto = new AuthorCreateDto();
        authorCreateDto.setName("Leo");
        authorCreateDto.setSurname("Tolstoy");
        AuthorDto createdAuthorDto = new AuthorDto();
        createdAuthorDto.setId(1L);
        createdAuthorDto.setName(authorCreateDto.getName());
        createdAuthorDto.setSurname(authorCreateDto.getSurname());
        when(authorService.createAuthor(any(AuthorCreateDto.class))).thenReturn(createdAuthorDto);

        mockMvc.perform(post("/author/create")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(authorCreateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.name").value("Leo"))
                .andExpect(jsonPath("$.surname").value("Tolstoy"));
    }

    @Test
    void testUpdateAuthor() throws Exception {
        AuthorUpdateDto authorUpdateDto = new AuthorUpdateDto();
        authorUpdateDto.setId(1L);
        authorUpdateDto.setName("Leo");
        authorUpdateDto.setSurname("Tolstoy");
        AuthorDto updatedAuthorDto = new AuthorDto();
        updatedAuthorDto.setId(1L);
        updatedAuthorDto.setName(authorUpdateDto.getName());
        updatedAuthorDto.setSurname(authorUpdateDto.getSurname());
        when(authorService.updateAuthor(any(AuthorUpdateDto.class))).thenReturn(updatedAuthorDto);
        mockMvc.perform(put("/author/update")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(authorUpdateDto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.name").value("Leo"))
                .andExpect(jsonPath("$.surname").value("Tolstoy"));
    }

    @Test
    void testDeleteAuthor() throws Exception {
        Long authorId = 1L;
        mockMvc.perform(delete("/author/delete/{id}", authorId))
                .andExpect(status().isOk());
        Mockito.verify(authorService, Mockito.times(1)).deleteAuthor(authorId);
    }
}